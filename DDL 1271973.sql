/*					
				SQL PROJECT NAME  : Hotel Management System(HMS)
					Trainee Name : Rakibul Islam
					Trainee ID : 1271973
				Batch ID : ESAD-CS/PNTL-M/53/01
----------------------------------------------------------------------------------------------

Table of Contents: DDL
			 --SECTION 01:  Create Database [HMS]
			--SECTION 02: Created Appropriate Tables with column definition related to the project
			--SECTION 03: ALTER, DROP AND MODIFY TABLES & COLUMNS
			 --SECTION 04: CREATE CLUSTERED AND NONCLUSTERED INDEX
			 --SECTION 05: CREATE SEQUENCE & ALTER SEQUENCE
			 --SECTION 06: CREATE A VIEW & ALTER VIEW
			--SECTION 07: CREATE STORED PROCEDURE & ALTER STORED PROCEDURE
			--SECTION 08: CREATE FUNCTION(SCALAR, SIMPLE TABLE VALUED, MULTISTATEMENT TABLE VALUED) & ALTER FUNCTION
			 --SECTION 09: CREATE TRIGGER (FOR/AFTER TRIGGER)
			 --SECTION 10: CREATE TRIGGER (INSTEAD OF TRIGGER)
*/


/*
=========================SECTION01===============================================
		  CHECK DATABASE EXISTANCE & CREATE DATABASE WITH ATTRIBUTES
=================================================================================
*/
IF DB_ID('HMS') IS NOT NULL
DROP DATABASE HMS
GO
CREATE DATABASE HMS
ON
(
	name='hms_data_1',
	filename='C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER01\MSSQL\DATA\hms_data_1',
	size=10MB,
	maxsize=50MB,
	filegrowth=5%
)
LOG ON
(
	name='hms_log_1',
	filename='C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER01\MSSQL\DATA\hms_log_1',
	size=8MB,
	maxsize=40MB,
	filegrowth=5MB
)
GO
USE HMS
GO
/*
==============================  SECTION 02  ==============================
		          CREATE TABLES WITH COLUMN DEFINITION 
==========================================================================
*/

--============== Table with IDENTITY, PRIMARY KEY & nullability CONSTRAINT ============--

-- USE SCHEMA
CREATE TABLE HOTEL
(
	HOTEL_ID CHAR(10) CONSTRAINT PK_HOTEL_ID PRIMARY KEY,
	HOTEL_NAME CHAR(30) NOT NULL,
	HOTEL_ADDRESS VARCHAR(50) NOT NULL,
	HOTEL_COUNTRY CHAR(20) NOT NULL,
	HOTEL_PHOENO INT NOT NULL,
	HOTEL_DESCRIPTION VARCHAR(50) NOT NULL
)
GO
CREATE TABLE FACILTY_TYPE
(
	FACILTY_TYPE_ID CHAR(10) CONSTRAINT FACILTY_TYPE_ID PRIMARY KEY,
	FACILTY_TYPE_NAME VARCHAR(20) NOT NULL,
	FACILTY_TYPE_DESC VARCHAR(50) NOT NULL,
	CAPACITY INT CHECK (CAPACITY>0) NOT NULL,
	BASE_COST DECIMAL(7,2) CHECK (BASE_COST>0) NOT NULL,
	COST_PERIOD DECIMAL(7,2) CHECK (COST_PERIOD>0) NOT NULL
)
GO
CREATE TABLE FACILTY
(
	FACILTY_ID CHAR(10) CONSTRAINT FACILTY_ID PRIMARY KEY,
	FACILTY CHAR(20) NOT NULL,
	FACILTY_DESC VARCHAR(50) NOT NULL,
	FACILTY_STATUS CHAR(20) NOT NULL,
	HOTEL_ID CHAR(10) NOT NULL,
	CONSTRAINT FK_HOTEL_ID FOREIGN KEY (HOTEL_ID) REFERENCES HOTEL(HOTEL_ID)
)
GO
CREATE TABLE SERVICE_CATEGORY
(
	SERVICE_CATEGORY_ID CHAR(10) CONSTRAINT PK_SERVICE_CATEGORY_ID PRIMARY KEY,
	SERVICE_CATEGORY_NAME CHAR(20) NOT NULL,
	SERVICE_CATEGORY_DESC VARCHAR(50) NOT NULL,
	SERVICE_CATEGORY_TYPE CHAR(20) NOT NULL
)
GO
CREATE TABLE SERVICE
(
	SERVICE_ID CHAR(10) CONSTRAINT PK_SERVICE_ID PRIMARY KEY,
	SERVICE_NAME CHAR(20) NOT NULL,
	SERVICE_DESC VARCHAR(100) NOT NULL,
	SERVICE_RESTRICTIONS VARCHAR(100) NOT NULL,
	SERVICE_NOTES VARCHAR(100) NOT NULL,
	SERVICE_COMMENTS VARCHAR(100) NOT NULL,
	SERVICE_STATUS CHAR(20) NOT NULL,
	AVAILABLE_TIMES TIME NOT NULL,
	SERVICE_CAPACITY INT CHECK (SERVICE_CAPACITY>0) NOT NULL,
	SERVICE_CATEGORY_ID CHAR(10) NOT NULL,
	HOTEL_ID1 CHAR(10) NOT NULL,
	CONSTRAINT FK_SERVICE_CATEGORY_ID FOREIGN KEY (SERVICE_CATEGORY_ID) REFERENCES SERVICE_CATEGORY(SERVICE_CATEGORY_ID),
	CONSTRAINT FK_HOTEL_ID1 FOREIGN KEY (HOTEL_ID1) REFERENCES HOTEL(HOTEL_ID)
)
GO
CREATE TABLE ADVERTISMENT
(
	ADVERTISMENT_ID INT CONSTRAINT PK_ADVERTISMENT_ID PRIMARY KEY,
	ADVERTISMENT_NAME CHAR(100) NOT NULL,
	ADV_DESC VARCHAR(100) NOT NULL,
	START_DATE DATETIME NOT NULL,
	END_DATE DATETIME NOT NULL,
	PRICE DECIMAL(7,2) CHECK (PRICE>0) NOT NULL,
	INCLUSIONS VARCHAR(100) NOT NULL,
	EXCLUSION VARCHAR(100) NOT NULL,
	STATUS CHAR(10) NOT NULL
)
GO
CREATE TABLE ADV_PACKAGE
(
	ADV_PACKAGE_ID INT CONSTRAINT PK_ADV_PACKAGE_ID PRIMARY KEY,
	ADVERTISMENT_ID INT NOT NULL,
	CONSTRAINT FK_ADVERTISMENT_ID FOREIGN KEY (ADVERTISMENT_ID) REFERENCES ADVERTISMENT(ADVERTISMENT_ID)
)
GO
CREATE TABLE PACKAGE_SERVICE
(
	ADVERTISMENT_ID1 INT CONSTRAINT PK_ADVERTISMENT_ID1 PRIMARY KEY,
	SERVICE_ID CHAR(10) NOT NULL,
	CONSTRAINT FK_SERVICE_ID FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE(SERVICE_ID)
)
GO
CREATE TABLE RELATION_FACILTYTYPE_SERVICE
(
	FACILITY_TYPE CHAR(10) CONSTRAINT PK_FACILITY_TYPE PRIMARY KEY,
	SERVICE_ID1 CHAR(10) 
	CONSTRAINT FK_SERVICE_ID1 FOREIGN KEY (SERVICE_ID1) REFERENCES SERVICE(SERVICE_ID)
)
GO
CREATE TABLE CUSTOMER
(
	CUSTOMER_ID CHAR(10) CONSTRAINT PK_CUSTOMER_ID PRIMARY KEY,
	CUSTOMER_NAME CHAR(20) NOT NULL,
	CUSTOMER_ADDRESS VARCHAR(50) NOT NULL,
	CUSTOMER_PHONENO INT NOT NULL,
	CUSTOMER_COUNTRY CHAR(20) NOT NULL,
	CUSTOMER_EMAIL_ADDRESS VARCHAR(50) NOT NULL
)
GO
CREATE TABLE EMPLOYEE
(
	EMPLOYEE_ID CHAR(10) CONSTRAINT PK_EMPLOYEE_ID PRIMARY KEY,
	EMPLOYEE_NAME CHAR(20) NOT NULL,
	EMPLOYEE_PHONENO INT NOT NULL,
	EMPLOYEE_EMAIL_ADDRESS VARCHAR(50) NOT NULL,
	EMPLOYEE_POSITION CHAR(20) NOT NULL
)
GO
CREATE TABLE RESERVATION
(
	RESERVATION_ID CHAR(10) CONSTRAINT PK_RESERVATION_ID PRIMARY KEY,
	R_NAME CHAR(20) NOT NULL,
	R_STATUS CHAR(20) NOT NULL,
	R_TYPE CHAR(20) NOT NULL,
	R_PLACEDATETIME DATETIME NOT NULL,
	R_DISCOUNT_PERCENTAGE INT NOT NULL,
	R_DESCRIPTION VARCHAR(50) NOT NULL,
	CUSTOMER_ID CHAR(10),
	EMPLOYEE_ID CHAR(10),
	CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
	CONSTRAINT FK_EMPLOYEE_ID FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
)
GO
CREATE TABLE BOOKING_DETAILS
(
	BOOKING_DETAILS_ID CHAR(10) CONSTRAINT BOOKING_DETAILS_ID PRIMARY KEY,
	BD_START_DATE DATETIME NOT NULL,
	BD_END_DATE DATETIME NOT NULL,
	BD_QUANTITY INT CHECK(BD_QUANTITY>0) NOT NULL,
	BD_TOTAL_PRICE DECIMAL(7,2) CHECK (BD_TOTAL_PRICE>0) NOT NULL,
	ADVERTISEMENT_ID2 INT,
	RESERVATION_ID CHAR(10),
	CONSTRAINT FK_ADVERTISEMENT_ID2 FOREIGN KEY (ADVERTISEMENT_ID2) REFERENCES ADVERTISMENT(ADVERTISMENT_ID),
	CONSTRAINT FK_RESERVATION_ID FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATION(RESERVATION_ID)
)
GO
CREATE TABLE FACILITY_BOOKING
(
FACILITY_BOOKING_ID INT CONSTRAINT PK_FACILITY_BOOKING_ID PRIMARY KEY,
FB_NAME CHAR(10) NOT NULL,
FB_START_DATE DATETIME NOT NULL,
FB_END_DATE DATETIME NOT NULL,
FB_DESC VARCHAR(100) NOT NULL,
FACILITY_ID CHAR(10),
BOOKING_DETAILS_ID  CHAR(10),
CONSTRAINT FK_FACILITY_ID FOREIGN KEY (FACILITY_ID) REFERENCES FACILTY(FACILTY_ID),
CONSTRAINT FK_BOOKING_DETAILS_ID FOREIGN KEY (BOOKING_DETAILS_ID) REFERENCES BOOKING_DETAILS(BOOKING_DETAILS_ID)
)
GO
CREATE TABLE PAYMENT
(
PAYMENT_ID INT CONSTRAINT PK_PAYMENT_ID PRIMARY KEY,
P_TYPE CHAR(50) NOT NULL,
P_TOTAL_PRICE DECIMAL(7,2) NOT NULL,
RESERVATION_ID1 CHAR(10),
CONSTRAINT FK_RESERVATION_ID1 FOREIGN KEY (RESERVATION_ID1) REFERENCES RESERVATION(RESERVATION_ID)
)
GO
CREATE TABLE RELATION_CUSTOMER_BOOKING
(
CUSTOMER_ID1 CHAR(10) CONSTRAINT PK_CUSTOMER_ID1 PRIMARY KEY,
BOOKING_DETAILS_ID1 CHAR(10) NOT NULL,
CUSTOMER_ID2 CHAR(10),
CONSTRAINT FK_CUSTOMER_ID1 FOREIGN KEY (CUSTOMER_ID2) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_BOOKING_DETAILS_ID1 FOREIGN KEY (BOOKING_DETAILS_ID1) REFERENCES BOOKING_DETAILS(BOOKING_DETAILS_ID)
)
GO
CREATE TABLE OTHERCHARGES
(
OTHERCHARGES_ID CHAR(10) CONSTRAINT PK_OTHERCHARGES_ID PRIMARY KEY,
OC_NAME CHAR(50) NOT NULL,
OC_TYPE CHAR(50) NOT NULL,
OC_PRICE DECIMAL(7,2) NOT NULL,
BOOKING_DETAILS_ID2 CHAR(10) NOT NULL,
CONSTRAINT FK_BOOKING_DETAILS_ID2 FOREIGN KEY (BOOKING_DETAILS_ID2) REFERENCES BOOKING_DETAILS(BOOKING_DETAILS_ID)
)
GO
--============== CREATE A SCHEMA ============--
CREATE SCHEMA hms
GO
--============== USE SCHEMA IN A TABLE ============--

CREATE TABLE hms.tblCommentsInfo
(
	commentId INT,
	comment NVARCHAR(100) NULL,
	commenterAge INT NULL
)
GO
/*
==============================  SECTION 03  ==============================
		          ALTER, DROP AND MODIFY TABLES & COLUMNS
==========================================================================
*/


--============== ALTER TABLE SCHEMA AND TRANSFER TO [DBO] ============--

ALTER SCHEMA dbo TRANSFER hms.tblCommentsInfo
GO
--============== Update column definition ============--

ALTER TABLE HOTEL
ALTER COLUMN HOTEL_NAME CHAR(10) NOT NULL
GO
--============== ADD column with DEFAULT CONSTRAINT ============--

ALTER TABLE BOOKING_DETAILS
ADD BD_TOTAL_PRICE MONEY DEFAULT 0.00
GO
--============== ADD CHECK CONSTRAINT with defining name ============--

ALTER TABLE EMPLOYEE
ADD CONSTRAINT EMPLOYEE_ID CHECK(id LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
CONSTRAINT EMPLOYEE_PHONENO CHECK(phone LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
CONSTRAINT EMPLOYEE_EMAIL_ADDRESS CHECK(email LIKE '%@%' )
GO
--============== DROP COLUMN ============--

ALTER TABLE CUSTOMER
DROP COLUMN CUSTOMER_COUNTRY
GO
--============== DROP TABLE ============--

IF OBJECT_ID('ADV_PACKAGE') IS NOT NULL
DROP TABLE ADV_PACKAGE
GO

--============== DROP SCHEMA ============--

DROP SCHEMA hms
GO
/*
==============================  SECTION 04  ==============================
		          CREATE CLUSTERED AND NONCLUSTERED INDEX
==========================================================================
*/

-- Clustered Index
CREATE CLUSTERED INDEX CUSTOMER
ON CUSTOMER
(
	CUSTOMER_ID
)
GO

-- Nonclustered Index
CREATE UNIQUE NONCLUSTERED INDEX EMPLOYEE
ON EMPLOYEE
(
	EMPLOYEE_ID,
	EMPLOYEE_PHONENO
)
GO

/*
==============================  SECTION 05  ==============================
							 CREATE SEQUENCE
==========================================================================
*/

CREATE SEQUENCE seqNum
	AS INT
	START WITH 1
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 200
	CYCLE
	CACHE 10
GO

--============== ALTER SEQUENCE ============--

ALTER SEQUENCE seqNum
	MAXVALUE 200
	CYCLE
	CACHE 9
GO
/*
==============================  SECTION 06  ==============================
							  CREATE A VIEW
==========================================================================
*/

CREATE VIEW BOOKING
AS
SELECT BOOKING_DETAILS_ID, BD_START_DATE, BD_END_DATE, BD_TOTAL_PRICE FROM BOOKING_DETAILS
GO

--============== ALTER VIEW ============--

ALTER VIEW BOOKING
AS
SELECT BOOKING_DETAILS_ID, BD_START_DATE, BD_END_DATE, BD_TOTAL_PRICE FROM BOOKING_DETAILS
GO
/*
==============================  SECTION 07  ==============================
							 STORED PROCEDURE
==========================================================================
*/
--============== STORED PROCEDURE for insert data using parameter ============--
CREATE TYPE servicePackage AS TABLE (SERVICE_NAME CHAR(20))
GO
    -- INPUT PARAMETERS
CREATE PROCEDURE PACKAGE_SERVICE
    @ADVERTISEMENT_ID INT,
    @ADV_DESC VARCHAR(100),
    @START_DATE DATETIME,
    @END_DATE DATETIME,
    @PRICE DECIMAL(7,2),
    @EMPLOYEE_NAME CHAR(20),
    -- OUTPUT PARAMETER
    @ADV_PACKAGE_ID INT
AS
BEGIN
    SELECT @ADVERTISEMENT_ID, @ADV_DESC, @START_DATE, @END_DATE, @PRICE, @EMPLOYEE_NAME
    FROM ADVERTISEMENT
    INNER JOIN EMPLOYEE ON ADVERTISEMENT.ADVERTISEMENT_ID = EMPLOYEE.EMPLOYEE_NAME
END
GO
--============== STORED PROCEDURE for UPDATE data ============--
CREATE PROCEDURE spUpdateBooking   @bookingId INT,
								   @BookingDate DATE
AS
BEGIN
	UPDATE BOOKING
	SET
	BD_END_DATE =@BookingDate
	WHERE @bookingId = @bookingId
END
GO
--============== STORED PROCEDURE for DELETE Table data ============--

CREATE PROCEDURE spDeleteFACILITY_BOOKING	@FACILITY_BOOKING_ID INT
AS
BEGIN
	DELETE FROM FACILITY_BOOKING
	WHERE FACILITY_BOOKING_ID = @FACILITY_BOOKING_ID
END
GO
--============== TRY CATCH IN A STORED PROCEDURE & RAISERROR WITH ERROR NUMBER AND ERROR MESSAGE ============--

CREATE PROCEDURE spRaisError
AS
BEGIN
	BEGIN TRY
		DELETE FROM FACILTY
	END TRY
	BEGIN CATCH
		DECLARE @Error VARCHAR(200) = 'Error' + CONVERT(varchar, ERROR_NUMBER(), 1) + ' : ' + ERROR_MESSAGE()
		RAISERROR(@Error, 1, 1)
	END CATCH
END
GO
--============== ALTER STORED PROCEDURE ============--

ALTER PROCEDURE spUpdateFACILTY	@FACILTY_ID INT,
								@FACILTY VARCHAR(20),
								@FACILTY_DESC VARCHAR(40)
AS
BEGIN
	UPDATE FACILTY
	SET
	FACILTY_STATUS = @FACILTY_STATUS,
	FACILTY_ID = @FACILTY_ID
	WHERE FACILTY_ID = @FACILTY_ID 
END
GO
/*
==============================  SECTION 08  ==============================
								 FUNCTION
==========================================================================
*/

--============== A SCALAR FUNCTION ============--
-- A Scalar Function to get Current Year Total Net Sales
CREATE FUNCTION hmMonthlyBookingDetails()
RETURNS MONEY
AS
BEGIN
	DECLARE @PACKAGE_SERVICE MONEY

	SELECT @PACKAGE_SERVICE = SUM((SERVICE_DESC))
	FROM SERVICE
	WHERE YEAR(SERVICE.AVAILABLE_TIMES) = YEAR(GETDATE())

	RETURN @PACKAGE_SERVICE

END
GO
--============== A SIMPLE TABLE VALUED FUNCTION ============--
-- A Inline Table Valued Function to get monthly total sales, discount & net sales using two parameter @year & @month

CREATE FUNCTION hmMonthlyBookingDetails(@year INT, @month INT)
RETURNS TABLE
AS
RETURN
(
	SELECT 
			SUM(BD_TOTAL_PRICE) AS 'Total Booking',
			SUM(BD_QUANTITY) AS 'Net Booking'
	FROM BOOKING_DETAILS
	WHERE YEAR(BOOKING_DETAILS.BD_START_DATE) = @year AND MONTH(BOOKING_DETAILS.BD_START_DATE) = @month

)
GO
--============== A MULTISTATEMENT TABLE VALUED FUNCTION ============--

-- Function to get monthly net sales using two parameter @year & @month
CREATE FUNCTION hmMonthlyBookingDetails(@year INT, @month INT)
RETURNS @BOOKING_DETAILS TABLE
(
	[BOOKING_DETAILS_ID] INT,
	[BD_START_DATE] DATETIME,
	[BD_QUANTITY] INT,
	[Booking Title] VARCHAR(50),
	[Booking Fee] MONEY,
	Discount MONEY,
	[Net Booking] MONEY
)
AS
BEGIN	
	INSERT INTO @BOOKING_DETAILS
	SELECT
	BOOKING_DETAILS.BOOKING_DETAILS_ID,
	BOOKING_DETAILS.BD_START_DATE,
	BOOKING_DETAILS.BD_QUANTITY,
	BOOKING_DETAILS.ADVERTISEMENT_ID2,
	BOOKING_DETAILS.BD_TOTAL_PRICE,
	BOOKING_DETAILS.RESERVATION_ID
	FROM BOOKING_DETAILS
	INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID
	INNER JOIN EMPLOYEE ON EMPLOYEE.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID
	WHERE YEAR(CUSTOMER.CUSTOMER_COUNTRY) = @year AND MONTH(CUSTOMER.CUSTOMER_COUNTRY) = @month

	RETURN
END                              
GO
--============== ALTER FUNCTION ============--

ALTER FUNCTION BOOKING_DETAILS(@year INT, @month INT)
RETURNS TABLE
AS
RETURN
(
	SELECT 
	SUM(BD_QUANTITY) AS 'TOTAL',
	SUM(BD_TOTAL_PRICE) AS 'Total PRICE'
	FROM BOOKING_DETAILS
	WHERE YEAR(BOOKING_DETAILS.BD_START_DATE) = @year AND MONTH(BOOKING_DETAILS.BD_START_DATE) = @month
)
GO
/*
==============================  SECTION 09  ==============================
							FOR/AFTER TRIGGER
==========================================================================
*/
 -- Create trigger on Stockin table and update stock in CUSTOMER table
CREATE TRIGGER trStockIn
ON BOOKING_DETAILS
FOR INSERT
AS
BEGIN
	DECLARE @Bid INT
	DECLARE @stock INT

	SELECT
	@Bid = BOOKING_DETAILS_ID,
	@stock = BOOKING_DETAILS.BD_QUANTITY
	FROM BOOKING_DETAILS

	UPDATE BOOKING_DETAILS
	SET BD_QUANTITY = BD_QUANTITY + @stock
	WHERE BOOKING_DETAILS_ID = @Bid
	PRINT 'Stock updated via Stock Entry'
END
GO
--============== AN AFTER/FOR TRIGGER FOR INSERT, UPDATE, DELETE ============--

-- Create trigger on tblbookingForInfrastructure table and update stock in product table
CREATE TRIGGER hmBookingStockManage
ON tblBookingforstructure 
FOR INSERT, UPDATE, DELETE
AS
	BEGIN
		DECLARE @Bid INT
		DECLARE @BD_QUANTITY INT
				-- Check if this trigger is executed only for updated
				IF (EXISTS(SELECT * FROM INSERTED) AND EXISTS(SELECT * FROM DELETED))
					BEGIN
						UPDATE BOOKING_DETAILS
						SET stock = (CASE
										WHEN BOOKING_DETAILS.BD_QUANTITY > BOOKING_DETAILS.BD_QUANTITY THEN stock - (BOOKING_DETAILS_ID.BD_QUANTITY-BOOKING_DETAILS_ID.BD_QUANTITY)
										WHEN BOOKING_DETAILS.BD_QUANTITY < BD.BD_QUANTITY THEN stock + (BD_QUANTITY.quantity-BD_QUANTITY.quantity)
										ELSE BOOKING_DETAILS.BD_QUANTITY
									END)
						FROM BOOKING_DETAILS As b
						INNER JOIN deleted AS d
						ON b.BOOKING_DETAILS_ID = b.BOOKING_DETAILS_ID
						WHERE b.BOOKING_DETAILS_ID = B.BOOKING_DETAILS_ID
						PRINT 'Stock updated via modified sales entry'
					END
				--Check if this trigger is for only for inserted
				ELSE IF (EXISTS(SELECT * FROM INSERTED) AND NOT EXISTS(SELECT * FROM DELETED))
					BEGIN
						SELECT
						@Bid = BOOKING_DETAILS_ID,
						@BD_QUANTITY = BD_QUANTITY
						FROM BOOKING_DETAILS
						UPDATE BOOKING_DETAILS_ID
						SET stock = stock - @BD_QUANTITY
						WHERE BOOKING_DETAILS_ID = @Bid
						PRINT 'Stock updated via new booking'
					END
				-- Check if this trigger is executed only for deleted
				ELSE IF (EXISTS(SELECT * FROM DELETED) AND NOT EXISTS(SELECT * FROM INSERTED))
					BEGIN
						SELECT
						@Bid = BOOKING_DETAILS_ID,
						@BD_QUANTITY = BD_QUANTITY
						FROM deleted

						UPDATE BOOKING_DETAILS
						SET stock = stock + @BD_QUANTITY
						WHERE BOOKING_DETAILS_ID = @Bid
						PRINT 'Stock updated due to deleted sales id'
					END
				-- If not match any condition then rollback the transaction
				ELSE ROLLBACK TRANSACTION
		END
GO
/*
==============================  SECTION 10  ==============================
							INSTEAD OF TRIGGER
==========================================================================
*/

-- Trigger For get price from another table and manipulate data in current table
CREATE TRIGGER hotelService
ON SERVICE
INSTEAD OF INSERT
AS
BEGIN
	IF ((SELECT COUNT(*) FROM inserted) > 0)
		BEGIN
			INSERT INTO SERVICE(SERVICE_ID, SERVICE_NAME, SERVICE_DESC, AVAILABLE_TIMES)
			SELECT
			SERVICE_ID,
			SERVICE_NAME,
			SERVICE_DESC,
			AVAILABLE_TIMES
			from SERVICE
			INNER JOIN CUSTOMER ON SERVICE.SERVICE_ID = SERVICE_ID
		END
	ELSE
	BEGIN
		PRINT 'Error Occured for Inserting Data Into courseSales Table !'
	END
END
GO

--============== AN INSTEAD OF TRIGGER ON VIEW ============--

CREATE TRIGGER hmsViewInsteadInsert
ON CUSTOMER
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_NAME)
	SELECT i.CUSTOMER_ID, i.CUSTOMER_NAME FROM CUSTOMER i
END
GO

--============== ALTER TRIGGER ============--

ALTER TRIGGER hmsViewInsteadInsert
ON EMPLOYEE
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO EMPLOYEE(EMPLOYEE_ID, EMPLOYEE_PHONENO, EMPLOYEE_POSITION)
	SELECT i.EMPLOYEE_ID, i.EMPLOYEE_PHONENO, i.EMPLOYEE_POSITION FROM inserted i
END
GO
